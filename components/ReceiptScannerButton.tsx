import React, { useState } from "react";
import { View, Text, Alert, Modal, TouchableOpacity, FlatList, StyleSheet, Platform } from "react-native";
import * as ImagePicker from "expo-image-picker";
import { scanReceipt, ReceiptData as RawReceiptData } from "../OCR-reciept/scanner";

interface ReceiptData extends RawReceiptData {
  type: "Expense" | "Income";
}
import { Category, Transaction } from "../types";

interface ReceiptScannerButtonProps {
  categories: Category[];
  insertTransaction: (transaction: Transaction) => Promise<void>;
}

export default function ReceiptScannerButton({ categories, insertTransaction }: ReceiptScannerButtonProps) {
  const [result, setResult] = useState<ReceiptData | null>(null);
  const [modalVisible, setModalVisible] = useState(false);
  const [selectedCategoryId, setSelectedCategoryId] = useState<number | null>(null);

  const pickImage = async (fromCamera: boolean) => {
    // Request permissions (on web, this might not be needed for gallery)
    let permissionResult;
    if (fromCamera && Platform.OS !== "web") {
      permissionResult = await ImagePicker.requestCameraPermissionsAsync();
      if (permissionResult.status !== "granted") {
        Alert.alert("Permission needed", "Camera permissions are required!");
        return;
      }
    } else if (!fromCamera) {
      permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();
      if (permissionResult.status !== "granted") {
        Alert.alert("Permission needed", "Media library permissions are required!");
        return;
      }
    }

    // Pick image
    let pickerResult;
    if (fromCamera && Platform.OS !== "web") {
      pickerResult = await ImagePicker.launchCameraAsync({
        allowsEditing: false,
        quality: 1,
      });
    } else {
      pickerResult = await ImagePicker.launchImageLibraryAsync({
        allowsEditing: false,
        quality: 1,
      });
    }

    if (!pickerResult.canceled) {
      const imageUri = pickerResult.assets[0].uri;
      try {
      const data = await scanReceipt(imageUri);
      const processed = processReceiptData(data as RawReceiptData);
      setResult(processed);
      setModalVisible(true);
      } catch (error: any) {
        Alert.alert("Error", "Failed to scan receipt: " + error.message);
      }
    }
  };

  // Process receipt data to detect debit/credit, total amount, short description, title, date
  const processReceiptData = (data: RawReceiptData): ReceiptData => {
    const lowerDesc = data.description.toLowerCase();
    const creditKeywords = ["credit", "deposit", "received", "payment received", "refund"];
    const isCredit = creditKeywords.some((kw) => lowerDesc.includes(kw));
    const type: "Expense" | "Income" = isCredit ? "Income" : "Expense";

    // Use date from receipt if available, else current date
    let date = data.date;
    if (!date || date.trim() === "") {
      date = new Date().toISOString().split("T")[0];
    }

    // Short description: first 50 chars of description or title if description empty
    const shortDescription = data.description
      ? data.description.length > 50
        ? data.description.substring(0, 50) + "..."
        : data.description
      : data.title;

    return {
      ...data,
      type,
      date,
      description: shortDescription,
      title: data.title || "Receipt",
    };
  };

  const saveTransaction = async () => {
    if (!result) return;
    if (selectedCategoryId === null) {
      Alert.alert("Select Category", "Please select a category before saving.");
      return;
    }
    const transaction: Transaction = {
      id: 0, // id will be auto-generated by DB
      category_id: selectedCategoryId,
      amount: parseFloat(result.amount.replace(/[^\d.-]/g, "")) || 0,
      date: Math.floor(new Date(result.date).getTime() / 1000),
      description: result.description,
      type: result.type,
    };
    try {
      await insertTransaction(transaction);
      Alert.alert("Success", "Transaction saved successfully.");
      setModalVisible(false);
      setResult(null);
      setSelectedCategoryId(null);
    } catch (error: any) {
      Alert.alert("Error", "Failed to save transaction: " + error.message);
    }
  };

  return (
    <View style={{ marginVertical: 10 }}>
      <TouchableOpacity
        style={{ backgroundColor: "#007BFF", padding: 10, borderRadius: 5, alignItems: "center" }}
        onPress={() => {
          if (Platform.OS === "web") {
            pickImage(false); // Directly pick from gallery on web
          } else {
            Alert.alert(
              "Select Image Source",
              "Choose the source for the receipt image",
              [
                { text: "Camera", onPress: () => pickImage(true) },
                { text: "Gallery", onPress: () => pickImage(false) },
                { text: "Cancel", style: "cancel" },
              ]
            );
          }
        }}
      >
        <Text style={{ color: "white", fontWeight: "bold" }}>Scan Receipt</Text>
      </TouchableOpacity>

      {result && (
        <Modal visible={modalVisible} animationType="slide" transparent={true}>
          <View style={styles.modalOverlay}>
            <View style={styles.modalContent}>
              <Text style={styles.modalTitle}>Scanned Receipt Data</Text>
              <Text>Title: {result.title}</Text>
              <Text>Date: {result.date}</Text>
              <Text>Amount: {result.amount}</Text>
              <Text>Description: {result.description}</Text>
              <Text>Type: {result.type}</Text>

              <Text style={{ marginTop: 10, fontWeight: "bold" }}>Select Category:</Text>
              <FlatList
                data={categories}
                keyExtractor={(item) => item.id.toString()}
                renderItem={({ item }) => (
                  <TouchableOpacity
                    style={[
                      styles.categoryItem,
                      selectedCategoryId === item.id && styles.categorySelected,
                    ]}
                    onPress={() => setSelectedCategoryId(item.id)}
                  >
                    <Text>{item.name}</Text>
                  </TouchableOpacity>
                )}
                horizontal
              />

              <View style={{ flexDirection: "row", justifyContent: "space-between", marginTop: 20 }}>
                <TouchableOpacity
                  style={{ backgroundColor: "#ccc", padding: 10, borderRadius: 5, flex: 1, marginRight: 10, alignItems: "center" }}
                  onPress={() => { setModalVisible(false); setResult(null); setSelectedCategoryId(null); }}
                >
                  <Text>Cancel</Text>
                </TouchableOpacity>
                <TouchableOpacity
                  style={{ backgroundColor: "#007BFF", padding: 10, borderRadius: 5, flex: 1, marginLeft: 10, alignItems: "center" }}
                  onPress={saveTransaction}
                >
                  <Text style={{ color: "white" }}>Save Transaction</Text>
                </TouchableOpacity>
              </View>
            </View>
          </View>
        </Modal>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  modalOverlay: {
    flex: 1,
    backgroundColor: "#000000aa",
    justifyContent: "center",
    alignItems: "center",
  },
  modalContent: {
    backgroundColor: "white",
    padding: 20,
    borderRadius: 10,
    width: "90%",
    maxHeight: "80%",
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: "bold",
    marginBottom: 10,
  },
  categoryItem: {
    padding: 10,
    margin: 5,
    borderRadius: 8,
    backgroundColor: "#eee",
  },
  categorySelected: {
    backgroundColor: "#007BFF",
    color: "white",
  },
});
